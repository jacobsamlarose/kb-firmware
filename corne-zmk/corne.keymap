/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };
    };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  	T  	 |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | TG1  |  A  |  S  |  D  |  F  |  	G 	 |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  	B  	 |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | ALT | WIN | CTL(ENT) |   | SPC | FN2  | FN1 |
                        bindings = <
   &kp TAB  	&kp Q 	&kp W 	&kp E 		&kp R 		&kp T   		&kp Y 		&kp U  	&kp I     &kp O   &kp P    &kp BSPC
   &tog 1 		&kp A 	&kp S 	&kp D 		&kp F 		&kp G   		&kp H 		&kp J  	&kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT 	&kp Z 	&kp X 	&kp C 		&kp V 		&kp B   		&kp N 		&kp M  	&kp COMMA &kp DOT &kp FSLH &td0
								&kp LALT 	&kp LGUI 	&mt LCTRL RET 	&kp SPACE 	&mo 2 	&mo 1
                        >;
                };
                num_layer {
// -----------------------------------------------------------------------------------------
// |  TAB | 1 | 2 |  3  |  4  |  5  |   |  6  |  7  |  8   |   9  |   0   | BKSP |
// |  TG1 | 4 | 5 |  6  |  `  |  -  |   |     |     |      |  UP  |   \   |   `  |
// | SHFT | 7 | 8 |  9  |  0  |  =  |   |     |     | LEFT | DOWN | RIGHT |      |
//                | ALT | WIN | ENT |   | SPC | FN3 |  FN1 |
                        bindings = <
   &trans   &kp N1  &kp N2  &kp N3	&kp N4 		&kp N5      &kp N6  &kp N7  &kp N8 		&kp N9    	&kp N0 		&kp BSPC
   &tog 1 	&kp N4 	&kp N5 	&kp N6 	&kp GRAVE 	&kp MINUS	&trans 	&trans 	&trans 		&kp UP 		&kp BSLH 	&kp GRAVE
   &trans  	&kp N7	&kp N8 	&kp N9	&kp N0      &kp EQUAL   &trans  &trans  &kp LEFT   	&kp DOWN 	&kp RIGHT   &trans
							&trans  &trans  	&kp RET     &trans  &mo 3   &trans
                        >;
                };

                func_layer {
// -----------------------------------------------------------------------------------------
// |  TAB | BT1  | BT2  | BT3 | BT4 | MYKEYB  |   |     |     |     | ( | ) |  DEL |
// | CTRL |    	 |      |     |     | OUT_TOG |   |     |     |     | [ | ] | CAPS | 
// | SHFT |      |      |     |     |         |   |     |     |     | { | } |      |
//                    	 | ALT | WIN | ENT    |   | SPC | FN2 | FN3 |
                        bindings = <
   &trans  		&bt BT_SEL 0 	&bt BT_SEL 1 	&bt BT_SEL 2 	&bt BT_SEL 3 	&kp C_AL_KEYBOARD_LAYOUT &kp F1 	&kp F2  &kp F3 	&kp LPAR &kp RPAR &kp DEL
   &kp LCTRL 	&trans   		&trans 			&trans  		&trans 			&out OUT_TOG  			 &kp F4 	&kp F5 	&kp F6  &kp LBKT &kp RBKT &kp CAPS
   &trans 		&trans   		&trans 			&trans  		&trans  		&trans   				 &kp F7 	&kp F8  &kp F9  &kp LBRC &kp RBRC &trans
													&trans 	&trans  &kp RET 	&trans 	&trans  &mo 3
                        >;
                };
				media_layer {
// -----------------------------------------------------------------------------------------
// | ESC | RWND | PRVS | PLAY  | NEXT | MFFD |   | F1 |  F2   |  F3   |  F4   |  F5   |  BTCLR  |
// |     |      |      |       |      | VOL+ |   | F6 |  F7   |  F8   |	 F9   |  F10  |     	| 
// |     |      |      |       |      | VOL- |   |       |     |     |     |     | BL_TOG |
//                     | HYPER | MEH  |  ENT |   |  SPC  | FN2 | FN3 |
                        bindings = <
   &kp ESC  &kp C_RW &kp K_PREV &kp K_PP 				&kp K_NEXT 			&kp C_FF   		&kp F1 		&kp F2		&kp F3		&kp F4		&kp F5		&bt BT_CLR
   &trans 	&trans   &trans 	&trans   				&trans 				&kp K_VOL_UP   	&kp F6 		&kp F7  	&kp F8 		&kp F9   	&kp F10		&trans
   &trans 	&trans 	 &trans 	&trans   				&trans   			&kp K_VOL_DN    &trans 		&trans 	 	&trans 		&bl BL_TOG  &bl BL_DEC	&bl BL_INC
								&kp LS(LC(LA(LGUI))) 	&kp LC(LS(LALT))	&kp RET   		&trans  	&trans		&trans
                        >;
                };
        };
};
